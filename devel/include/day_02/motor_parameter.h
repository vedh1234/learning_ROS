// Generated by gencpp from file day_02/motor_parameter.msg
// DO NOT EDIT!


#ifndef DAY_02_MESSAGE_MOTOR_PARAMETER_H
#define DAY_02_MESSAGE_MOTOR_PARAMETER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace day_02
{
template <class ContainerAllocator>
struct motor_parameter_
{
  typedef motor_parameter_<ContainerAllocator> Type;

  motor_parameter_()
    : id(0)
    , description()
    , speed(0.0)
    , enc_count(0)
    , accelaration(0.0)  {
    }
  motor_parameter_(const ContainerAllocator& _alloc)
    : id(0)
    , description(_alloc)
    , speed(0.0)
    , enc_count(0)
    , accelaration(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _description_type;
  _description_type description;

   typedef float _speed_type;
  _speed_type speed;

   typedef int64_t _enc_count_type;
  _enc_count_type enc_count;

   typedef float _accelaration_type;
  _accelaration_type accelaration;





  typedef boost::shared_ptr< ::day_02::motor_parameter_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::day_02::motor_parameter_<ContainerAllocator> const> ConstPtr;

}; // struct motor_parameter_

typedef ::day_02::motor_parameter_<std::allocator<void> > motor_parameter;

typedef boost::shared_ptr< ::day_02::motor_parameter > motor_parameterPtr;
typedef boost::shared_ptr< ::day_02::motor_parameter const> motor_parameterConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::day_02::motor_parameter_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::day_02::motor_parameter_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::day_02::motor_parameter_<ContainerAllocator1> & lhs, const ::day_02::motor_parameter_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.description == rhs.description &&
    lhs.speed == rhs.speed &&
    lhs.enc_count == rhs.enc_count &&
    lhs.accelaration == rhs.accelaration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::day_02::motor_parameter_<ContainerAllocator1> & lhs, const ::day_02::motor_parameter_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace day_02

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::day_02::motor_parameter_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::day_02::motor_parameter_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::day_02::motor_parameter_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::day_02::motor_parameter_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::day_02::motor_parameter_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::day_02::motor_parameter_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::day_02::motor_parameter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "33a9c9e48425fe54a289968ec836ca62";
  }

  static const char* value(const ::day_02::motor_parameter_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x33a9c9e48425fe54ULL;
  static const uint64_t static_value2 = 0xa289968ec836ca62ULL;
};

template<class ContainerAllocator>
struct DataType< ::day_02::motor_parameter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "day_02/motor_parameter";
  }

  static const char* value(const ::day_02::motor_parameter_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::day_02::motor_parameter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n"
"string description\n"
"float32 speed\n"
"int64 enc_count\n"
"float32 accelaration\n"
;
  }

  static const char* value(const ::day_02::motor_parameter_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::day_02::motor_parameter_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.description);
      stream.next(m.speed);
      stream.next(m.enc_count);
      stream.next(m.accelaration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motor_parameter_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::day_02::motor_parameter_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::day_02::motor_parameter_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.description);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "enc_count: ";
    Printer<int64_t>::stream(s, indent + "  ", v.enc_count);
    s << indent << "accelaration: ";
    Printer<float>::stream(s, indent + "  ", v.accelaration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DAY_02_MESSAGE_MOTOR_PARAMETER_H
